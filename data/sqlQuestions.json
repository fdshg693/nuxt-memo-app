[
    {
        "id": 1,
        "level": 1,
        "genre": "SELECT",
        "question": "ユーザーの名前を取得する",
        "answer": "SELECT name FROM users",
        "DbName": "users",
        "explanation": "この問題は基本的なSELECT文の使い方を学ぶ問題です。usersテーブルからnameカラムのみを取得しています。SELECTの後にカラム名を指定することで、必要なデータだけを効率的に取得できます。"
    },
    {
        "id": 2,
        "level": 1,
        "genre": "SELECT",
        "question": "お客さんの年齢を取得する",
        "answer": "SELECT age FROM customers",
        "DbName": "customers",
        "explanation": "この問題では、customersテーブルからageカラムを取得しています。テーブル名とカラム名を正確に指定することで、必要な情報を取得できます。異なるテーブル（usersとcustomers）を使い分ける練習にもなります。"
    },
    {
        "id": 3,
        "level": 1,
        "genre": "SELECT",
        "question": "商品名を取得する",
        "answer": "SELECT product_name FROM products",
        "DbName": "products"
    },
    {
        "id": 4,
        "level": 1,
        "genre": "INSERT",
        "question": "以下のユーザーを追加する: (8, 'Hanna', 30)",
        "answer": "INSERT INTO users (id, name, age) VALUES (8, 'Hanna', 30)",
        "showRecordsSql": "SELECT * FROM users",
        "DbName": "users",
        "explanation": "INSERT文を使用してusersテーブルに新しいレコードを追加する問題です。INSERT INTO文の後に挿入先のテーブル名、括弧内にカラム名を指定し、VALUESの後に実際の値を記述します。カラムの順序と値の順序は一致させる必要があります。"
    },
    {
        "id": 5,
        "level": 1,
        "genre": "SELECT",
        "subgenre": "SUM",
        "question": "注文の合計金額を取得する",
        "answer": "SELECT SUM(total_amount) FROM orders",
        "DbName": "orders",
        "explanation": "この問題では集計関数SUM()を使用してordersテーブルのtotal_amountカラムの合計値を計算しています。SUM()は数値データの合計を求める関数で、データベース全体の統計情報を取得する際によく使用されます。"
    },
    {
        "id": 6,
        "level": 1,
        "genre": "SELECT",
        "question": "Aliceのメールアドレスを取得する",
        "answer": "SELECT email FROM users WHERE name = 'Alice'",
        "DbName": "users"
    },
    {
        "id": 7,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "JOIN",
        "question": "INNER JOINを使用して、ユーザーと注文の情報を結合する",
        "answer": "SELECT users.name, orders.total_amount FROM users INNER JOIN orders ON users.id = orders.user_id",
        "DbName": "users,orders"
    },
    {
        "id": 8,
        "level": 1,
        "genre": "SELECT",
        "subgenre": "WHERE",
        "question": "Laptopの在庫数を取得する",
        "answer": "SELECT stock FROM products WHERE product_name = 'Laptop'",
        "DbName": "products"
    },
    {
        "id": 9,
        "level": 2,
        "genre": "UPDATE",
        "subgenre": "WHERE",
        "question": "商品『Scanner』の在庫数を5に更新する",
        "answer": "UPDATE products SET stock = 5 WHERE product_name = 'Scanner'",
        "showRecordsSql": "SELECT * FROM products",
        "DbName": "products"
    },
    {
        "id": 10,
        "level": 2,
        "genre": "DELETE",
        "subgenre": "WHERE",
        "question": "年齢が30歳のユーザーを削除する",
        "answer": "DELETE FROM users WHERE age = 30",
        "showRecordsSql": "SELECT * FROM users",
        "DbName": "users"
    },
    {
        "id": 11,
        "level": 2,
        "genre": "INSERT",
        "question": "新しい商品『Webcam』(9, 'Webcam', 12) を追加する",
        "answer": "INSERT INTO products (id, product_name, stock) VALUES (9, 'Webcam', 12)",
        "DbName": "products"
    },
    {
        "id": 12,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "WHERE",
        "question": "注文テーブルから合計金額が200以上の注文を取得する",
        "answer": "SELECT * FROM orders WHERE total_amount >= 200",
        "DbName": "orders"
    },
    {
        "id": 13,
        "level": 2,
        "genre": "UPDATE",
        "subgenre": "WHERE",
        "question": "『Frank』という名前の顧客の年齢を32に更新する",
        "answer": "UPDATE customers SET age = 32 WHERE name = 'Frank'",
        "showRecordsSql": "SELECT * FROM customers",
        "DbName": "customers"
    },
    {
        "id": 14,
        "level": 1,
        "genre": "SELECT",
        "subgenre": "COUNT",
        "question": "ユーザーの人数を取得する",
        "answer": "SELECT COUNT(*) FROM users",
        "DbName": "users"
    },
    {
        "id": 15,
        "level": 1,
        "genre": "SELECT",
        "subgenre": "COUNT",
        "question": "商品テーブルの種類数を取得する",
        "answer": "SELECT COUNT(*) FROM products",
        "DbName": "products"
    },
    {
        "id": 16,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "ORDERBY",
        "question": "注文金額が高い順に注文情報を取得する",
        "answer": "SELECT * FROM orders ORDER BY total_amount DESC",
        "DbName": "orders"
    },
    {
        "id": 17,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "ORDERBY",
        "question": "年齢が若い順に顧客情報を取得する",
        "answer": "SELECT * FROM customers ORDER BY age ASC",
        "DbName": "customers"
    },
    {
        "id": 18,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "GROUPBY",
        "question": "年齢ごとのユーザー数を取得する",
        "answer": "SELECT age, COUNT(*) FROM users GROUP BY age",
        "DbName": "users"
    },
    {
        "id": 19,
        "level": 2,
        "genre": "SELECT",
        "subgenre": "GROUPBY",
        "question": "商品ごとの在庫合計数を取得する",
        "answer": "SELECT product_name, SUM(stock) FROM products GROUP BY product_name",
        "DbName": "products"
    },
    {
        "id": 20,
        "level": 1,
        "genre": "PERFORMANCE",
        "question": "以下のSQLクエリのパフォーマンスを分析し、改善点があれば提案してください",
        "analysisCode": "SELECT * FROM users WHERE name LIKE '%田%' ORDER BY age DESC",
        "type": "analysis",
        "DbName": "users"
    },
    {
        "id": 21,
        "level": 1,
        "genre": "PERFORMANCE",
        "question": "このクエリのパフォーマンス問題を特定し、インデックス戦略を提案してください",
        "analysisCode": "SELECT u.name, COUNT(o.id) FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE u.age > 25 GROUP BY u.id, u.name ORDER BY COUNT(o.id) DESC",
        "type": "analysis",
        "DbName": "users,orders"
    },
    {
        "id": 22,
        "level": 1,
        "genre": "TRANSACTION",
        "question": "以下のトランザクションの問題点を指摘し、適切な分離レベルやロック戦略を提案してください",
        "analysisCode": "BEGIN TRANSACTION;\nUPDATE products SET stock = stock - 1 WHERE id = 100;\nSELECT stock FROM products WHERE id = 100;\nINSERT INTO orders (user_id, product_id, quantity) VALUES (1, 100, 1);\nCOMMIT;",
        "type": "analysis",
        "DbName": "products,orders"
    },
    {
        "id": 23,
        "level": 1,
        "genre": "DEADLOCK",
        "question": "以下の2つのトランザクションがデッドロックを引き起こす可能性を分析し、回避策を提案してください",
        "analysisCode": "-- Transaction A:\nBEGIN;\nUPDATE users SET age = age + 1 WHERE id = 1;\nUPDATE customers SET age = age + 1 WHERE id = 2;\nCOMMIT;\n\n-- Transaction B:\nBEGIN;\nUPDATE customers SET age = age - 1 WHERE id = 2;\nUPDATE users SET age = age - 1 WHERE id = 1;\nCOMMIT;",
        "type": "analysis",
        "DbName": "users,customers"
    },
    {
        "id": 24,
        "level": 2,
        "genre": "PERFORMANCE",
        "question": "N+1問題を含むクエリを分析し、効率的な解決策を提案してください",
        "analysisCode": "-- アプリケーションコードで実行される可能性があるクエリ:\nSELECT * FROM orders WHERE user_id = 1;\n-- その後、各注文に対して：\nSELECT * FROM products WHERE id = ?;\nSELECT * FROM users WHERE id = ?;",
        "type": "analysis",
        "DbName": "orders,products,users"
    },
    {
        "id": 25,
        "level": 2,
        "genre": "TRANSACTION",
        "question": "このトランザクションの分離レベルとファントムリード問題について分析してください",
        "analysisCode": "SET TRANSACTION ISOLATION LEVEL READ COMMITTED;\nBEGIN TRANSACTION;\nSELECT COUNT(*) FROM orders WHERE total_amount > 1000;\n-- 他のトランザクションが高額注文を追加\nSELECT COUNT(*) FROM orders WHERE total_amount > 1000;\nCOMMIT;",
        "type": "analysis",
        "DbName": "orders"
    },
    {
        "id": 26,
        "level": 2,
        "genre": "DEADLOCK",
        "question": "複数テーブルの更新順序によるデッドロック問題を分析し、最適な更新順序を提案してください",
        "analysisCode": "-- Transaction 1:\nBEGIN;\nUPDATE products SET stock = stock - 5 WHERE id = 100;\nUPDATE orders SET status = 'processing' WHERE id = 1;\nUPDATE users SET purchase_count = purchase_count + 1 WHERE id = 1;\nCOMMIT;\n\n-- Transaction 2:\nBEGIN;\nUPDATE users SET last_activity = NOW() WHERE id = 1;\nUPDATE orders SET priority = 'high' WHERE id = 1;\nUPDATE products SET view_count = view_count + 1 WHERE id = 100;\nCOMMIT;",
        "type": "analysis",
        "DbName": "products,orders,users"
    }
]